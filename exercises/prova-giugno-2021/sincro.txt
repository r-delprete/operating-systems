/**
 * Un sistema è composto di un buffer di N posizioni, 2 * N processi attivi ed un processo coordinatore. Il processo coordinatore estrae
 * uno dopo l'altro in maniera casuale i numeri da 1 a N e ad ogni estrazione processi competono per aggiudicarsi l'accesso
 * alla posizione corrispondente del buffer, scrivendone il proprio PID.
 * Un processo cha ha scritto il proprio PID nel buffer non partecipa più alla contesa. 
 * Quando tutte le posizioni del buffer sono state assegnate, il coordinatore si alterna con il primo processo che ha avuto accesso al buffer nel
 * leggere e stampare, uno alla volta, il contenuto dello stesso.
 */
 
buffer[N]: int = { 0 }
mutex_buffer: mutex = 1
is_first: int = 0
mutex_first: mutex = 1
count: int = -1
mutex_count: mutex = 1
stampa: sem binario = 0
buffer_modificato: sem binario = 0
posizione: int = -1
mutex_posizione: int = 1
turno_master: sem binario = 1
turno_slave: sem binario = 0


coordinatore_process() {
  for (int i = 0 to N) {
    lock(mutex_count)
    count++
    unlock(mutex_count)

    wait(buffer_modificato)
  }

  signal(stampa)

  while(1) {
    wait(turno_master)

    lock(mutex_posizione)
    if (posizione == N) {
      unlock(mutex_posizione)

      signal(turno_slave)

      exit()
    }

    print(buffer[posizione])
    unlock(mutex_posizione)

    signal(turno_slave)
  }
}

process_slave(id) {
  inserted = 0

  lock(mutex_count)
  while(!inserted) {
    if (count == N) {
      unlock(mutex_count)
      exit()
    } else if (id % N == count) {
      unlock(mutex_count)
      
      lock(mutex_buffer)
      buffer[id % N] = getpid()
      unlock(mutex_buffer)

      signal(buffer_modificato)

      inserted = 1
    }
  }

  lock(mutex_first)
  if (!is_first) {
    is_first = 1
    unlock(mutex_first)

    wait(stampa)

    while(1) {
      wait(turno_slave)

      lock(mutex_posizione)
      if (posizione == N) {
        unlock(mutex_posizione)

        signal(turno_master)

        exit()
      }

      print(buffer[posizione])
      unlock(mutex_posizione)

      signal(turno_master)
    }
  }
  unlock(mutex_first)

  exit()
}