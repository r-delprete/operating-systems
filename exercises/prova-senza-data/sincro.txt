/**
 * In un negozio di strumenti musicali ci sono al più M postazioni di prova per le chitarre.
 * Ogni potenziale cliente che trova posto può richiedere uno di N modelli a disposizione,
 * tenendo però presente che per ogni modello ci sono solo C chitarre. 
 * Si gestisca la distribuzione delle chitarre usando semafori e/o variabili di condizione
 * e discutere, per la soluzione proposta, possibili situazioni di starvation/deadlock.
 */

postazioni: int = M
chitarre[N] = { C }                     // C chitarre per N modelli
mutex_postazioni: sem binario = 1       // mutex per le postazioni
mutex_chitarra[N]: sem binario = { 1 }  // mutex per ogni modello di chitarra
cond[N]: var condizione = { 1 }         // variabile di condizione per ogni modello di chitarra

cliente_process() {
  while (1) {
    wait(mutex_postazioni)
    if (postazioni > 0) {
      postazioni--                          // occupo la postazione
      signal(mutex_postazioni)

      int modello = rand(0, N)
      wait(mutex_chitarre[modello])
      while (chitarre[modello] <= 0) {
        signal(mutex_chitarre[modello])
        cond_wait(cond_chitarre[modello])   // attendo disponibilità per quel modello
      }
      chitarre[modello]--
      signal(mutex_chitarre[modello])

      prova_chitarra(chitarre[modello])

      wait(mutex_chitarre[modello])
      chitarre[modello]++                   // libero quel modello di chitarra
      cond_signal(cond_chitarre[modello])   // sveglio chi è in attesa di quel modello
      signal(mutex_chitarre[modello])

      wait(mutex_postazioni)
      postazioni++                          // libero la postazione
      signal(mutex_postazioni)
    }
    signal(mutex_postazioni)
  }
}