/**
* Si consideri il seguente problema:
* I passeggeri in transito in un aeroporto prima di imbarcarsi sull'aereo, devono superare i controlli di sicurezza.
* I controlli sono gestiti come segue:
*  - Ogni passeggero sceglie tra N code quella più breve cui accodarsi ed attendere il proprio turno per passare il controllo.
*  - Ogni coda è gestita da un addetto che lascia passare il primo passeggero della coda,
*    indirizzandolo verso una delle M code di accesso al metal detector.
* Ogni addetto indirizza il passeggero verso la coda più breve con lunghezza minore di K. 
* Se il numero di code con lunghezza minore di K è inferiore a M/2, gli addetti non lasciano passare i passeggeri finché persiste tale condizione.
* Dopo aver attraversato il metal detector, il passeggero si dirige all'imbarco.
*/

int: coda_passeggeri[N] = 0
int: coda_metal_detector[M] = 0
int: count_code_inferiori_K = 0
mutex: mutex_coda_passeggeri = 1
mutex: mutex_coda_metal_detector = 1
mutex: mutex_code_inferiori_K = 1
semaforo binario: turno_metal_detector = 0
semaforo contatore: passeggeri = 0

passeggero_process() {
  min = inf
  ind = -1

  lock(mutex_coda_passeggeri)
  for (int i = 0 to N) {
    if (coda_passeggeri[i] < min) {
      min = coda_passeggeri[i]
      ind = i
    }
  }
  coda_passeggeri[ind]++
  unlock(mutex)

  signal(passeggeri)

  wait(turno_metal_detector)

  passaggio_metal_detector()

  exit(0) // si imbarca
}

addetto_process() {
  while (1) {
    wait(passeggeri)

    lock(mutex_code_inferiori_K)
    if (count_code_inferiori_K < (M / 2)) {
      for (int j = 0 to N) {
        for (int i = 0 to M) {
          lock(mutex_coda_metal_detector)
          if (coda_metal_detector[i] < K) {
            count_code_inferiori_K++
            unlock(mutex_code_inferiori_K)
            
            coda_metal_detector[i]++
            unlock(mutex_coda_metal_detector)

            lock(mutex_coda_passeggeri)
            coda_passeggeri[j]--
            unlock(mutex_coda_passeggeri)
          } else {
            unlock(mutex_coda_metal_detector)
          }
        }
      }

      signal(turno_metal_detector)
    } else {
      unlock(mutex_code_inferiori_K)
    }
  }
}