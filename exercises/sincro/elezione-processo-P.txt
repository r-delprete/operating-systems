/**
* In un sistema sono presenti N processi che si auto-organizzano per eleggere un processo P.
* Appena eletto, P assegna un numero casuale [0, M] con M >> N ad ognuno degli N-1 processi 
* e successivamente produce 1 elemento. Il processo a cui è stato assegnato 
* il numero più piccolo consuma l'elemento prodotto da P, mentre gli altri restano in attesa. 
* Quando l'elemento è consumato, segnala P che assegna nuovi numeri ai processi e produce
* nuovamente, ripetendo il tutto.
*/

processi[N - 1]: int = { -1 }
elemento: int = 0
mutex_processi: mutex = 1
mutex_elemento: mutex = 1
produci: sem binario = 1
consuma: sem binario = 0
eletto: int = 0
produttore: int = 0
mutex_elezione: mutex = 1
mutex_produttore: mutex = 1

P_process() {
  while(1) {
    lock(mutex_elezione)
    if (eletto == 0) {
      eletto = 1
      produttore = getpid()
      unlock(mutex_elezione)
    } else {
      unlock(mutex_elezione)
    }
    
    lock(mutex_produttore)
    if (produttore == getpid()){
      unlock(mutex_produttore)
      
      wait(produci)

      lock(mutex_processi)
      for (int i = 0 to N - 1) {
        processi[i] = rand(0, M)
      }
      unlock(mutex_processi)

      lock(mutex_elemento)
      elemento = produci()
      unlock(mutex_elemento)

      signal(consuma)
    } else {
      unlock(mutex_produttore)
    }
  }
}

consumers_process(id) {
  while(1) {
    wait(consuma)

    min_id = -1
    min_value = M + 1

    lock(mutex_processi)
    for (int i = 0 to N - 1) {
      if (min_value > processi[i]) {
        min_value = processi[i]
        min_id = i
      }
    }
    unlock(mutex_processi)

    if (min_id == id) {
      lock(mutex_elemento)
      consuma_elemento(elemento)
      unlock(mutex_elemento)

      signal(produci)
    }
  }
}