* Ogni fumatore esegue ripetutamente un
* ciclo in cui prepara la sigaretta e poi la fuma. Per preparare una sigaretta ogni fumatore
* ha bisogno di:
* - tabacco;
* - carta;
* - fiammiferi.
* Ogni fumatore possiede un solo elemento in quantità illimitata. In particolare,
* - il fumatore F1 possiede il tabacco;
* - il fumatore F2 possiede la carta;
* - il fumatore F3 possiede i fiammiferi.
* Presso la tabaccheria vi è una quantità infinita di tutti e tre gli elementi. Vi sono tre
* impiegati, I1, I2 e I3, ognuno responsabile di una solo elemento: tabacco, carta e
* fiammiferi. Due impiegati alla volta vengono scelti a caso e mettono a disposizione
* l'elemento di cui sono responsabili. Il fumatore che possiede il terzo elemento può
* prelevare gli altri due, prepara la sigaretta e la fuma. Quando termina lo segnala agli
* impiegati i quali ripetono il processo.
* Si implementi una soluzione che modelli l'attività descritta in C, Java, o pseudo-codice
* (SOLO per i non iscritti in Ingegneria Informatica) e si descriva la sincronizzazione tra i
* processi. Si discuta inoltre se la soluzione proposta può presentare rinvio indefinito e/o
* deadlock.
*/

semaforo binario: pronto = 1, impiegato_1 = 0, impiegato_2 = 0, impiegato_3 = 0
semaforo contatore: tabacco = inf, carta = inf, fiammiferi = inf
mutex: mutex_tipo = 1
int: tipo = 0

fumatore_process() {
  while(1) {
    lock(mutex_tipo)
    tipo = rand(1, 3)

    if (tipo == 1) {
      unlock(mutex_tipo)

      wait(carta)
      wait(fiammiferi)

      chiudi()
      fuma()

      signal(pronto)
    } else if (tipo == 2) {
      unlock(mutex_tipo)

      wait(tabacco)
      wait(fiammiferi)

      chiudi()
      fuma()

      signal(pronto)
    } else {
      unlock(mutex_tipo)

      wait(tabacco)
      wait(carta)

      chiudi()
      fuma()

      signal(pronto)
    }
  }
}

tabaccaio_process() {
  while(1) {
    wait(pronto)

    lock(mutex_tipo)
    if (tipo == 1) {
      unlock(mutex_tipo)

      signal(impiegato_2)
      signal(impiegato_3)
    } else if (tipo == 2) {
      unlock(mutex_tipo)

      signal(impiegato_1)
      signal(impiegato_3)
    } else {
      unlock(mutex_tipo)

      signal(impiegato_1)
      signal(impiegato_2)
    }
  }
}

impiegato_1_process() {
  while(1) {
    wait(impiegato_1)

    signal(tabacco)
  }
}

impiegato_2_process() { 
 while (1){
    wait(impiegato_2)

    signal(carta)
  }
}

impiegato_3_process() {
  while(1) {
    wait(impiegato_3)

    signal(fiammiferi)
  }
}